//: Playground - noun: a place where people can play

import Cocoa

var str = "Hello, playground"

let morseTiming: [String: [[Double]]] =
[" ": [[2 , 0],[1 , 0]], "@": [[1 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0]], "a": [[1 , 1],[1 , 0],[3 , 1],[1 , 0]], "b": [[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0]], "#": [[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0]], "c": [[3 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0]], "d": [[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0]], "%": [[1 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0]], "e": [[1 , 1],[1 , 0]], "f": [[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0]], "g": [[3 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0]], "h": [[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0]], "i": [[1 , 1],[1 , 0],[1 , 1],[1 , 0]], "*": [[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0]], "j": [[1 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0]], "+": [[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0]], "k": [[3 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0]], "l": [[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0]], "-": [[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0]], "m": [[3 , 1],[1 , 0],[3 , 1],[1 , 0]], ".": [[2 , 0],[1 , 0]], "n": [[3 , 1],[1 , 0],[1 , 1],[1 , 0]], "o": [[3 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0]], "0": [[3 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0]], "p": [[1 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0]], "1": [[1 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0]], "q": [[3 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0]], "2": [[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0]], "r": [[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0]], "3": [[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0]], "s": [[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0]], "4": [[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0]], "t": [[3 , 1],[1 , 0]], "5": [[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0]], "u": [[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0]], "6": [[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0]], "v": [[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0]], "7": [[3 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0]], "w": [[1 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0]], "8": [[3 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0]], "x": [[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0]], "9": [[3 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0]], "y": [[3 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0]], "z": [[3 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0]], "\\": [[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0]], "=": [[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0]], "?": [[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[1 , 1],[1 , 0]], "_": [[1 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0],[3 , 1],[1 , 0],[1 , 1],[1 , 0],[3 , 1],[1 , 0]]]

func toIntervals(anArray: [[Double]]) -> [[Double]]
{
    let t = anArray.map({(x) -> Double in return x[0]})
    let r = t.reduce(0.0, combine: +)
    let q = anArray.map({(x) -> [Double] in
        return [(x[0] / r), x[1]]
    })
    return q.reduce([[0.0, q[0][1]]],
        combine: { (r: [[Double]], x: [Double]) -> [[Double]] in
        return r + [[(r.last![0]+x[0]), x[1]]]
    })
}

func findInterval(anArray:[[Double]], i: Int, v: Double) -> (Double, Int)
{
    var j = i
    while !(
        (anArray[j][0] < abs(v % 1)) &&
        (anArray[(j + 1) % (anArray.count-1)][0] > abs(v % 1)))
    {
        j = (j + 1) % (anArray.count - 1)
        print(j)
    }
    return (anArray[j][1], j)
}



func stringToMorse(aString: String) -> [[Double]]
{
    let cs = aString.lowercaseString.characters.map {String($0)}
    let ts: [[Double]] = cs.flatMap { (c) -> [[Double]] in
        return morseTiming[c]!
    }
    return ts
}

print(stringToMorse("Morse"))

print(-1.5 % 1)
print(toIntervals([[2,1], [1,1], [3,1],[3,1]]))
print(findInterval(toIntervals([[2,1], [1,0], [3,0],[3,1]]), i: 3, v: 0.4))
